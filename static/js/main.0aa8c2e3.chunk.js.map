{"version":3,"sources":["PokemonCard.js","MainContent.js","App.js","serviceWorker.js","index.js"],"names":["PokemonCard","name","sprite","src","alt","MainContent","pokeunoname","pokeunosprite","pokedosname","pokedossprite","className","App","state","unoname","unosprite","dosname","dossprite","pokeuno","Math","round","random","pokedos","fetch","then","response","json","poke","setState","sprites","front_default","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAUeA,MARf,YAAwC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACzB,OACI,6BACI,4BAAKD,GACL,yBAAKE,IAAKD,EAAQE,IAAI,OCUnBC,MAZf,YAAkF,IAA3DC,EAA0D,EAA1DA,YAAaC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,cAI5D,OACI,yBAAKC,UAAU,UACX,kBAAC,EAAD,CAAaT,KAAMK,EAAaJ,OAAQK,IACxC,iCACA,kBAAC,EAAD,CAAaN,KAAMO,EAAaN,OAAQO,MC6BrCE,E,kDApCb,aAAe,IAAD,8BACZ,gBACKC,MACL,CACEC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,UAAW,IAPD,E,gEAWO,IAAD,OACZC,EAAUC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC1BC,EAAUH,KAAKC,MAAsB,IAAhBD,KAAKE,UAChCE,MAAM,qCAAD,OAAsCL,IACxCM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEd,QAASa,EAAKzB,KAAMa,UAAWY,EAAKE,QAAQC,mBAE5EP,MAAM,qCAAD,OAAsCD,IACxCE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEZ,QAASW,EAAKzB,KAAMe,UAAWU,EAAKE,QAAQC,qB,+BAMpE,IAAD,EAC4CC,KAAKlB,MAAhDC,EADD,EACCA,QAASC,EADV,EACUA,UAAWC,EADrB,EACqBA,QAASC,EAD9B,EAC8BA,UACrC,OACE,6BACE,kBAAC,EAAD,CAAaV,YAAaO,EAASN,cAAeO,EAAWN,YAAaO,EAASN,cAAeO,S,GA/BxFe,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0aa8c2e3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction PokemonCard({ name, sprite }) {\r\n    return (\r\n        <div>\r\n            <h1>{name}</h1>\r\n            <img src={sprite} alt='' />\r\n        </div>\r\n    )\r\n}\r\nexport default PokemonCard","import React from \"react\"\r\nimport PokemonCard from \"./PokemonCard\"\r\n\r\n\r\nfunction MainContent({ pokeunoname, pokeunosprite, pokedosname, pokedossprite }) {\r\n\r\n\r\n\r\n    return (\r\n        <div className='Square'>\r\n            <PokemonCard name={pokeunoname} sprite={pokeunosprite} />\r\n            <p>vs</p>\r\n            <PokemonCard name={pokedosname} sprite={pokedossprite} />\r\n        </div >\r\n    )\r\n}\r\nexport default MainContent","import React, { Component } from 'react';\nimport './App.css';\nimport MainContent from './MainContent'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state =\n    {\n      unoname: '',\n      unosprite: '',\n      dosname: '',\n      dossprite: '',\n    }\n  }\n\n  componentDidMount() {\n    const pokeuno = Math.round(Math.random() * 450)\n    const pokedos = Math.round(Math.random() * 450)\n    fetch(`https://pokeapi.co/api/v2/pokemon/${pokeuno}`)\n      .then(response => response.json())\n      .then(poke => this.setState({ unoname: poke.name, unosprite: poke.sprites.front_default }))\n\n    fetch(`https://pokeapi.co/api/v2/pokemon/${pokedos}`)\n      .then(response => response.json())\n      .then(poke => this.setState({ dosname: poke.name, dossprite: poke.sprites.front_default }))\n  }\n\n\n\n\n  render() {\n    const { unoname, unosprite, dosname, dossprite } = this.state\n    return (\n      <div>\n        <MainContent pokeunoname={unoname} pokeunosprite={unosprite} pokedosname={dosname} pokedossprite={dossprite} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}